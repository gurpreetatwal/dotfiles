snippet suite "A suite for mocha" b
suite('${1:title}', function() {
  $0
});
endsnippet

snippet test "A test for Mocha/AVA" b
test('${1:title}', ${2:async }(${3:t}) => {
  $0
});
endsnippet

snippet req "require"
const $2`!p
def formatVariableName(path):
  name = path.split('/')[-1]

  overrides = {
    'ava': 'test',
    'bluebird': 'Promise',
    'clutch-assert': 'assert',
    'joi': 'Joi',
    'lodash': '_',
    'testdouble': 'td',
    'v4': 'uuid',
  }

  if name in overrides:
    return overrides[name]
  elif name.startswith('gulp-'):
    name = name[5:]

  if not name:
    return name

  name = name.title() # title case string
  name = name[0].lower() + name[1:]
  return re.sub(r'[_\-]', '', name)
snip.rv = formatVariableName(t[1])
` = require('$1');
$0
endsnippet

snippet cl "Log a variable along with its name"
console.log('$1', $1);
endsnippet

snippet cljs "Log a pretty printed object"
console.log('$1', JSON.stringify($1, null, 2));
endsnippet

snippet tdfn "A Testdouble function"
td.function('$1');
$0
endsnippet

snippet twhen "Record a simulation for testdouble"
td.when($1).then$2($3);
endsnippet

snippet iife "function expression"
(function() {
  try {
    $0
  } catch (e) {
    console.error(e);
  }
})();

endsnippet
snippet asynciife "async function expression"
(async function() {
  try {
    $0
  } catch (e) {
    console.error(e);
  }
})();
endsnippet
